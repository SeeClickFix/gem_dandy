#!/usr/bin/env ruby

require 'optparse'
require 'dotenv'
require 'fileutils'
require 'date'

Dotenv.load

require_relative '../lib/depbot'

options = {}

optparse = OptionParser.new do |opts|
  opts.banner = 'Usage: bin/depbot [options] github_org/github_repo'

  opts.separator ''
  opts.separator 'Specific options:'

  opts.banner = 'Usage: bin/depbot <github_org>/<github_repo> [options]'

  opts.on('-b BRANCH_NAME', String, '--branch', 'Base branch') do |branch|
    options[:branch] = branch
  end

  opts.on('-d', '--dry-run', 'Dry run (Do not push or create a pull request') do |d|
    options[:dry_run] = d
  end
end

optparse.parse!

BASE_BRANCH = options[:branch] || 'develop'
REPO = ARGV[0]
LOCKFILE = 'Gemfile.lock'.freeze

unless REPO
  puts optparse
  abort
end

client = Depbot::Github.client
git_repo = Depbot::GitRepo.new(REPO, BASE_BRANCH)

git_repo.checkout_update_branch

gemfile_path = "#{git_repo.path}/Gemfile"

FileUtils.chdir git_repo.path do
  system("BUNDLE_GEMFILE=#{gemfile_path} bundle lock --update")
end

diff_parser = Depbot::DiffParser.new(git_repo.diff_for(LOCKFILE))

abort('No updates today') if diff_parser.changes.empty?

### Commit ###

commit_message = "Bundle Update on #{Date.today.strftime('%Y-%m-%d')}"

git_repo.commit_and_push(commit_message) unless options[:dry_run]

### Pull Request ###

# FIXME: Move out of here...
#
pull_request_message = "**Updated RubyGems:**\n\n"
pull_request_message += diff_parser.changes.map do |gem|
  "- #{gem.to_markdown}"
end.join("\n")
pull_request_message += Depbot::PULL_REQUEST_FOOTER

if options[:dry_run]
  puts 'Pull request would have been submitted with the following message:'
  puts pull_request_message
else
  pull_request = client.create_pull_request(
    REPO, BASE_BRANCH, git_repo.update_branch,
    commit_message, pull_request_message
  )

  puts "Pull Request Created: #{pull_request[:html_url]}"
end
